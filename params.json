{
  "name": "Ionic-selectbox",
  "tagline": "Yet another selectbox component in AngularJS 1.5 < 2, with search and grouping, to be used in Ionic framework.",
  "body": "### Ionic-selectbox\r\n> Yet another selectbox component in _**AngularJS 1.5**_ &lt; 2, with search and grouping, to be used in **_Ionic framework_**.\r\n\r\nIonic selects have only one problem, they are _HTML_ select boxes, so they look as a mobile web page component. I developed this component because in a project we were facing the problem of a  huge list of records that had to be shown as a select box, but needed a search field to filter between the 3000 (or so) items, and also group them using a collapsible-like feature.\r\n\r\nNormal **_AngularJS_** select boxes solve the listing and the grouping using _ng-options_, but if the option list has too many items, a normal select becomes unusable.\r\n\r\nFound a couple of user-made solutions for this, but none of them really helped on solving our requirements, so I coded an Angular component.\r\n\r\n## How to install?\r\n\r\nRun:\r\n`bower install https://github.com/jsanta/ionic-selectbox.git`\r\n\r\n## Requirements:\r\nThis selectbox uses _fuzzy search_, and _groupBy_ filters from https://github.com/a8m/angular-filter\r\nTo minimize the number of watchers it also uses _bindonce_ from https://github.com/Pasvaz/bindonce (I suspect it's not really needed).\r\n\r\n## How to use?\r\nImport these files into your index.html file:\r\n* _lib/ionic-selectbox/css/selectComponent.css_\r\n* _lib/ionic-selectbox/js/selectComponent.js_\r\n\r\nIt's binded to the AngularJS module called app, so if you called your app with other name you'll have to change the name on the _.js_ file.\r\n\r\n**Note**: Instructions  may be  inacurate, but if you have done similar things before, or have some experience in developing using  external components, it shouldn't be an issue (yeah! I know, I plan to correct this).\r\n\r\n# Full example\r\nUsing _myCtrl_ as the controller (using _controller as_ notation)\r\n`<selectbox \r\n           model=\"myCtrl.model\"\r\n           list=\"myCtrl.selectList\"\r\n           display-callback=\"myCtrl.displayDetail\"\r\n           parse-data=\"myCtrl.parseData\"\r\n           display-item=\"myCtrl.displayItem\"\r\n           group-by=\"groupByAttr\"\r\n           parse-group-key=\"myCtrl.parseGroup\"\r\n           disable-if=\"myCtrl.operationOK\"\r\n           place-holder=\"select item from list\"\r\n           ng-if=\"!!!myCtrl.disableSelect\"\r\n           ></selectbox>`\r\n\r\n* **model**: _required_ model in the controller. \r\n* **list**: _required_ object array. It can also be just an array of strings. Any grouping is solved using the common attributes inside the object (see _group-by_). \r\n* **display-callback**: _optional_ function used to parse each item on the list for displaying the data on screen.\r\n* **parse-data**: _optional_ function used to show the data when a value is selected. See the code for another way of achieving this without using a directive. If not  included it uses the string representation of the object in the array (_[Object object]_ or _string_value_).\r\n* **display-item**: _optional_ function used to show an item detail (when required). It uses any custom  component used only to display data based on the the items attributes, like an embedded _more info_ link.\r\n* **group-by**: _optional_ object attribute used to group items.\r\n* **parse-group-key**: _optional_ function required to parse the group key (if needed).\r\n* **disable-if**: _optional_ disables the selectbox if this value is true.\r\n* **place-holder**: _optional_ string used as title for the select list, and as the  select field's placeholder.\r\n* _ng-if_: Angular _ng-if_ (included just because...).\r\n\r\n\r\n\r\n## TODO\r\n* Make it easier to use out of the box.\r\n* Improve performance.\r\n\r\nFeel free to fork, make improvements and use. Just share your findings as a pull request.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}